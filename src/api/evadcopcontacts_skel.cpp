/****************************************************************************
**
** DCOP Skeleton generated by dcopidl2cpp from evadcopcontacts.kidl
**
** WARNING! All changes made in this file will be lost!
**
*****************************************************************************/

#include "./evadcopcontacts.h"

#include <kdatastream.h>
#include <qasciidict.h>


static const int EvaDCOPContactsInterface_fhash = 29;
static const char* const EvaDCOPContactsInterface_ftable[26][3] = {
    { "int", "numFriends()", "numFriends()" },
    { "QStringList", "friends()", "friends()" },
    { "bool", "hasFriend(unsigned int)", "hasFriend(unsigned int id)" },
    { "QString", "nickOf(unsigned int)", "nickOf(unsigned int id)" },
    { "QString", "faceOf(unsigned int,bool)", "faceOf(unsigned int id,bool isOff)" },
    { "int", "genderOf(unsigned int)", "genderOf(unsigned int id)" },
    { "int", "levelOf(unsigned int)", "levelOf(unsigned int id)" },
    { "QString", "signatureOf(unsigned int)", "signatureOf(unsigned int)" },
    { "int", "numGroups()", "numGroups()" },
    { "QString", "groupName(int)", "groupName(int index)" },
    { "int", "group(unsigned int)", "group(unsigned int id)" },
    { "int", "numQuns()", "numQuns()" },
    { "QStringList", "Quns()", "Quns()" },
    { "QString", "QunName(unsigned int)", "QunName(unsigned int ext)" },
    { "QString", "QunNotice(unsigned int)", "QunNotice(unsigned int ext)" },
    { "QString", "QunDescription(unsigned int)", "QunDescription(unsigned int ext)" },
    { "int", "numQunMembers(unsigned int)", "numQunMembers(unsigned int ext)" },
    { "QStringList", "QunMembers(unsigned int)", "QunMembers(unsigned int ext)" },
    { "QString", "QunMemberNick(unsigned int,unsigned int)", "QunMemberNick(unsigned int ext,unsigned int id)" },
    { "QString", "QunMemberFace(unsigned int,unsigned int,bool)", "QunMemberFace(unsigned int ext,unsigned int id,bool isOff)" },
    { "unsigned int", "myQQ()", "myQQ()" },
    { "int", "onlineStatus(unsigned int)", "onlineStatus(unsigned int id)" },
    { "QString", "currentLoginIP()", "currentLoginIP()" },
    { "QString", "lastLoginIP()", "lastLoginIP()" },
    { "QString", "lastLoginTime()", "lastLoginTime()" },
    { 0, 0, 0 }
};
static const int EvaDCOPContactsInterface_ftable_hiddens[25] = {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

bool EvaDCOPContactsInterface::process(const QCString &fun, const QByteArray &data, QCString& replyType, QByteArray &replyData)
{
    static QAsciiDict<int>* fdict = 0;
    if ( !fdict ) {
	fdict = new QAsciiDict<int>( EvaDCOPContactsInterface_fhash, true, false );
	for ( int i = 0; EvaDCOPContactsInterface_ftable[i][1]; i++ )
	    fdict->insert( EvaDCOPContactsInterface_ftable[i][1],  new int( i ) );
    }
    int* fp = fdict->find( fun );
    switch ( fp?*fp:-1) {
    case 0: { // int numFriends()
	replyType = EvaDCOPContactsInterface_ftable[0][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << numFriends( );
    } break;
    case 1: { // QStringList friends()
	replyType = EvaDCOPContactsInterface_ftable[1][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << friends( );
    } break;
    case 2: { // bool hasFriend(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[2][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << hasFriend(arg0 );
    } break;
    case 3: { // QString nickOf(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[3][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << nickOf(arg0 );
    } break;
    case 4: { // QString faceOf(unsigned int,bool)
	unsigned int arg0;
	bool arg1;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	replyType = EvaDCOPContactsInterface_ftable[4][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << faceOf(arg0, arg1 );
    } break;
    case 5: { // int genderOf(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[5][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << genderOf(arg0 );
    } break;
    case 6: { // int levelOf(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[6][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << levelOf(arg0 );
    } break;
    case 7: { // QString signatureOf(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[7][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << signatureOf(arg0 );
    } break;
    case 8: { // int numGroups()
	replyType = EvaDCOPContactsInterface_ftable[8][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << numGroups( );
    } break;
    case 9: { // QString groupName(int)
	int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[9][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << groupName(arg0 );
    } break;
    case 10: { // int group(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[10][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << group(arg0 );
    } break;
    case 11: { // int numQuns()
	replyType = EvaDCOPContactsInterface_ftable[11][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << numQuns( );
    } break;
    case 12: { // QStringList Quns()
	replyType = EvaDCOPContactsInterface_ftable[12][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << Quns( );
    } break;
    case 13: { // QString QunName(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[13][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << QunName(arg0 );
    } break;
    case 14: { // QString QunNotice(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[14][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << QunNotice(arg0 );
    } break;
    case 15: { // QString QunDescription(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[15][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << QunDescription(arg0 );
    } break;
    case 16: { // int numQunMembers(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[16][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << numQunMembers(arg0 );
    } break;
    case 17: { // QStringList QunMembers(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[17][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << QunMembers(arg0 );
    } break;
    case 18: { // QString QunMemberNick(unsigned int,unsigned int)
	unsigned int arg0;
	unsigned int arg1;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	replyType = EvaDCOPContactsInterface_ftable[18][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << QunMemberNick(arg0, arg1 );
    } break;
    case 19: { // QString QunMemberFace(unsigned int,unsigned int,bool)
	unsigned int arg0;
	unsigned int arg1;
	bool arg2;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	if (arg.atEnd()) return false;
	arg >> arg2;
	replyType = EvaDCOPContactsInterface_ftable[19][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << QunMemberFace(arg0, arg1, arg2 );
    } break;
    case 20: { // unsigned int myQQ()
	replyType = EvaDCOPContactsInterface_ftable[20][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << myQQ( );
    } break;
    case 21: { // int onlineStatus(unsigned int)
	unsigned int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPContactsInterface_ftable[21][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << onlineStatus(arg0 );
    } break;
    case 22: { // QString currentLoginIP()
	replyType = EvaDCOPContactsInterface_ftable[22][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << currentLoginIP( );
    } break;
    case 23: { // QString lastLoginIP()
	replyType = EvaDCOPContactsInterface_ftable[23][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << lastLoginIP( );
    } break;
    case 24: { // QString lastLoginTime()
	replyType = EvaDCOPContactsInterface_ftable[24][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << lastLoginTime( );
    } break;
    default: 
	return DCOPObject::process( fun, data, replyType, replyData );
    }
    return true;
}

QCStringList EvaDCOPContactsInterface::interfaces()
{
    QCStringList ifaces = DCOPObject::interfaces();
    ifaces += "EvaDCOPContactsInterface";
    return ifaces;
}

QCStringList EvaDCOPContactsInterface::functions()
{
    QCStringList funcs = DCOPObject::functions();
    for ( int i = 0; EvaDCOPContactsInterface_ftable[i][2]; i++ ) {
	if (EvaDCOPContactsInterface_ftable_hiddens[i])
	    continue;
	QCString func = EvaDCOPContactsInterface_ftable[i][0];
	func += ' ';
	func += EvaDCOPContactsInterface_ftable[i][2];
	funcs << func;
    }
    return funcs;
}


