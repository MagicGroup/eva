/****************************************************************************
**
** DCOP Skeleton generated by dcopidl2cpp from evadcopview.kidl
**
** WARNING! All changes made in this file will be lost!
**
*****************************************************************************/

#include "./evadcopview.h"

#include <kdatastream.h>
#include <qasciidict.h>


static const int EvaDCOPViewInterface_fhash = 13;
static const char* const EvaDCOPViewInterface_ftable[13][3] = {
    { "int", "addTab(QString,QString,QString,QString)", "addTab(QString scriptName,QString name,QString image,QString contents)" },
    { "bool", "removeTab(int)", "removeTab(int id)" },
    { "void", "removeTabs(QString)", "removeTabs(QString scriptName)" },
    { "bool", "updateTab(int,QString)", "updateTab(int id,QString contents)" },
    { "void", "addButton(QString,QString,QString,QString)", "addButton(QString scriptName,QString buttonName,QString image,QString tip)" },
    { "void", "removeButton(QString,QString)", "removeButton(QString scriptName,QString name)" },
    { "void", "removeButtons(QString)", "removeButtons(QString scriptName)" },
    { "bool", "isTabExisted(int)", "isTabExisted(int id)" },
    { "void", "bringToFront(int)", "bringToFront(int id)" },
    { "void", "openChatWindow(unsigned int,bool)", "openChatWindow(unsigned int id,bool isQun)" },
    { "void", "updateStatusBar(QString)", "updateStatusBar(QString message)" },
    { "void", "openUrl(int,QString)", "openUrl(int id,QString url)" },
    { 0, 0, 0 }
};
static const int EvaDCOPViewInterface_ftable_hiddens[12] = {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

bool EvaDCOPViewInterface::process(const QCString &fun, const QByteArray &data, QCString& replyType, QByteArray &replyData)
{
    static QAsciiDict<int>* fdict = 0;
    if ( !fdict ) {
	fdict = new QAsciiDict<int>( EvaDCOPViewInterface_fhash, true, false );
	for ( int i = 0; EvaDCOPViewInterface_ftable[i][1]; i++ )
	    fdict->insert( EvaDCOPViewInterface_ftable[i][1],  new int( i ) );
    }
    int* fp = fdict->find( fun );
    switch ( fp?*fp:-1) {
    case 0: { // int addTab(QString,QString,QString,QString)
	QString arg0;
	QString arg1;
	QString arg2;
	QString arg3;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	if (arg.atEnd()) return false;
	arg >> arg2;
	if (arg.atEnd()) return false;
	arg >> arg3;
	replyType = EvaDCOPViewInterface_ftable[0][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << addTab(arg0, arg1, arg2, arg3 );
    } break;
    case 1: { // bool removeTab(int)
	int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPViewInterface_ftable[1][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << removeTab(arg0 );
    } break;
    case 2: { // void removeTabs(QString)
	QString arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPViewInterface_ftable[2][0]; 
	removeTabs(arg0 );
    } break;
    case 3: { // bool updateTab(int,QString)
	int arg0;
	QString arg1;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	replyType = EvaDCOPViewInterface_ftable[3][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << updateTab(arg0, arg1 );
    } break;
    case 4: { // void addButton(QString,QString,QString,QString)
	QString arg0;
	QString arg1;
	QString arg2;
	QString arg3;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	if (arg.atEnd()) return false;
	arg >> arg2;
	if (arg.atEnd()) return false;
	arg >> arg3;
	replyType = EvaDCOPViewInterface_ftable[4][0]; 
	addButton(arg0, arg1, arg2, arg3 );
    } break;
    case 5: { // void removeButton(QString,QString)
	QString arg0;
	QString arg1;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	replyType = EvaDCOPViewInterface_ftable[5][0]; 
	removeButton(arg0, arg1 );
    } break;
    case 6: { // void removeButtons(QString)
	QString arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPViewInterface_ftable[6][0]; 
	removeButtons(arg0 );
    } break;
    case 7: { // bool isTabExisted(int)
	int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPViewInterface_ftable[7][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << isTabExisted(arg0 );
    } break;
    case 8: { // void bringToFront(int)
	int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPViewInterface_ftable[8][0]; 
	bringToFront(arg0 );
    } break;
    case 9: { // void openChatWindow(unsigned int,bool)
	unsigned int arg0;
	bool arg1;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	replyType = EvaDCOPViewInterface_ftable[9][0]; 
	openChatWindow(arg0, arg1 );
    } break;
    case 10: { // void updateStatusBar(QString)
	QString arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EvaDCOPViewInterface_ftable[10][0]; 
	updateStatusBar(arg0 );
    } break;
    case 11: { // void openUrl(int,QString)
	int arg0;
	QString arg1;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	replyType = EvaDCOPViewInterface_ftable[11][0]; 
	openUrl(arg0, arg1 );
    } break;
    default: 
	return DCOPObject::process( fun, data, replyType, replyData );
    }
    return true;
}

QCStringList EvaDCOPViewInterface::interfaces()
{
    QCStringList ifaces = DCOPObject::interfaces();
    ifaces += "EvaDCOPViewInterface";
    return ifaces;
}

QCStringList EvaDCOPViewInterface::functions()
{
    QCStringList funcs = DCOPObject::functions();
    for ( int i = 0; EvaDCOPViewInterface_ftable[i][2]; i++ ) {
	if (EvaDCOPViewInterface_ftable_hiddens[i])
	    continue;
	QCString func = EvaDCOPViewInterface_ftable[i][0];
	func += ' ';
	func += EvaDCOPViewInterface_ftable[i][2];
	funcs << func;
    }
    return funcs;
}


